diff --git a/src/main/java/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject.java b/src/main/java/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject.java
index 48b2d70..16123f9 100644
--- a/src/main/java/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject.java
+++ b/src/main/java/org/spacious_team/table_wrapper/csv/CsvCellDataAccessObject.java
@@ -1,11 +1,20 @@
 package org.spacious_team.table_wrapper.csv;
-@RequiredArgsConstructor
 public class CsvCellDataAccessObject implements CellDataAccessObject<RowAndIndex, CsvTableRow> {
-    public static final CsvCellDataAccessObject INSTANCE = new CsvCellDataAccessObject(null);
-    public final DateTimeFormatter dateTimeFormatter;
+    public static final CsvCellDataAccessObject INSTANCE = new CsvCellDataAccessObject();
+    private final  DateTimeFormatter dateTimeFormatter;
+    private final  ZoneId defaultZone;
+    public CsvCellDataAccessObject() {
+        this(null, null);
+    }
+    public CsvCellDataAccessObject( DateTimeFormatter dateTimeFormatter,
+                                    ZoneId defaultZone) {
+        this.dateTimeFormatter = dateTimeFormatter;
+        this.defaultZone = defaultZone;
+    }
     @Override
     public  RowAndIndex getCell(CsvTableRow row, Integer cellIndex) {
-        return row.getCell(cellIndex).getRowAndIndex();
+         CsvTableCell cell = row.getCell(cellIndex);
+        return (cell == null) ? null : cell.getRowAndIndex();
     }
     @Override
     public  String getValue(RowAndIndex cell) {
@@ -14,6 +23,7 @@ public class CsvCellDataAccessObject implements CellDataAccessObject<RowAndIndex
     @Override
     public Instant getInstantValue(RowAndIndex cell) {
          String value = getValue(cell);
+        Objects.requireNonNull(value, "Not an instant");
         DateTimeFormatter formatter = (dateTimeFormatter != null) ?
                 dateTimeFormatter :
                 DateTimeFormatParser.getFor(value);
@@ -21,7 +31,7 @@ public class CsvCellDataAccessObject implements CellDataAccessObject<RowAndIndex
                 LocalDate.parse(value, formatter).atTime(12, 0) : 
                 LocalDateTime.parse(value, formatter);
         return dateTime
-                .atZone(ZoneId.systemDefault())
+                .atZone(defaultZone == null ? ZoneId.systemDefault() : defaultZone)
                 .toInstant();
     }
 }
diff --git a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTable.java b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTable.java
index 65c735f..b383f46 100644
--- a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTable.java
+++ b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTable.java
@@ -4,10 +4,11 @@ public class CsvTable extends AbstractTable<CsvTableRow> {
     @Setter
     @Getter(AccessLevel.PROTECTED)
     private CellDataAccessObject<?, CsvTableRow> cellDataAccessObject = CsvCellDataAccessObject.INSTANCE;
-    protected CsvTable(AbstractReportPage<CsvTableRow> reportPage,
+    protected <T extends Enum<T> & TableHeaderColumn>
+    CsvTable(AbstractReportPage<CsvTableRow> reportPage,
              String tableName,
              TableCellRange tableRange,
-                       Class<? extends TableColumnDescription> headerDescription,
+             Class<T> headerDescription,
              int headersRowCount) {
         super(reportPage, tableName, tableRange, headerDescription, headersRowCount);
     }
diff --git a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableFactory.java b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableFactory.java
index 0fa24cf..bffa858 100644
--- a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableFactory.java
+++ b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableFactory.java
@@ -4,10 +4,11 @@ public class CsvTableFactory extends AbstractTableFactory<CsvReportPage> {
         super(CsvReportPage.class);
     }
     @Override
-    public Table create(ReportPage reportPage,
+    public <T extends Enum<T> & TableHeaderColumn>
+    Table create(ReportPage reportPage,
                  String tableName,
                  TableCellRange tableRange,
-                        Class<? extends TableColumnDescription> headerDescription,
+                 Class<T> headerDescription,
                  int headersRowCount) {
         return new CsvTable(
                 cast(reportPage),
diff --git a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableHelper.java b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableHelper.java
index 6c1bfc6..d80a576 100644
--- a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableHelper.java
+++ b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableHelper.java
@@ -25,7 +25,7 @@ final class CsvTableHelper {
         for (int i = startColumn; i < endColumn; i++) {
             String cell = row[i];
             if (predicate.test(cell)) {
-                return new TableCellAddress(rowNum, i);
+                return TableCellAddress.of(rowNum, i);
             }
         }
         return NOT_FOUND;
diff --git a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java
index ce3a765..c9e8678 100644
--- a/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java
+++ b/src/main/java/org/spacious_team/table_wrapper/csv/CsvTableRow.java
@@ -36,7 +36,7 @@ public class CsvTableRow extends AbstractReportPageRow {
     }
     @Override
     public Iterator< TableCell> iterator() {
-        return new Iterator<>() {
+        return new Iterator< TableCell>() {
             private int cellIndex = 0;
             @Override
             public boolean hasNext() {
diff --git a/src/main/java/org/spacious_team/table_wrapper/csv/package-info.java b/src/main/java/org/spacious_team/table_wrapper/csv/package-info.java
new file mode 100644
index 0000000..5c3f752
--- /dev/null
+++ b/src/main/java/org/spacious_team/table_wrapper/csv/package-info.java
@@ -0,0 +1,2 @@
+@DefaultQualifier(NonNull.class)
+package org.spacious_team.table_wrapper.csv;
