diff --git a/src/main/java/org/spacious_team/table_wrapper/api/AbstractTable.java b/src/main/java/org/spacious_team/table_wrapper/api/AbstractTable.java
index e26720b..700d4aa 100644
--- a/src/main/java/org/spacious_team/table_wrapper/api/AbstractTable.java
+++ b/src/main/java/org/spacious_team/table_wrapper/api/AbstractTable.java
@@ -53,7 +53,9 @@ public abstract class AbstractTable<R extends ReportPageRow> implements Table {
         Map<TableColumn, Integer> columnIndices = new HashMap<>();
         ReportPageRow[] headerRows = new ReportPageRow[headersRowCount];
         for (int i = 0; i < headersRowCount; i++) {
-            headerRows[i] = reportPage.getRow(tableRange.getFirstRow() + 1 + i);
+             ReportPageRow row = reportPage.getRow(tableRange.getFirstRow() + 1 + i);
+            ReportPageRow notNullRow = requireNonNull(row, "Header row is absent");
+            headerRows[i] = notNullRow;
         }
         TableColumn[] columns = Arrays.stream(headerDescription.getEnumConstants())
                 .map(TableColumnDescription::getColumn)
@@ -124,7 +126,10 @@ public abstract class AbstractTable<R extends ReportPageRow> implements Table {
         }
         if (equalsObject != null) {
             collection.remove(equalsObject);
-            collection.addAll(duplicatesMerger.apply(equalsObject, element));
+             Collection<T> mergedCollection = duplicatesMerger.apply(equalsObject, element);
+            if (mergedCollection != null) {
+                collection.addAll(mergedCollection);
+            }
         } else {
             collection.add(element);
         }
@@ -148,10 +153,15 @@ public abstract class AbstractTable<R extends ReportPageRow> implements Table {
         }
         @Override
         public TableRow next() {
+            int rowNum;
              R row;
             do {
-                row = getRow(tableRange.getFirstRow() + (i++));
+                rowNum = tableRange.getFirstRow() + (i++);
+                row = getRow(rowNum);
             } while (row == null && hasNext());
+            if (row == null) { 
+                return new EmptyTableRow(AbstractTable.this, rowNum);
+            }
             tableRow.setRow(row);
             return tableRow;
         }
@@ -173,7 +183,8 @@ public abstract class AbstractTable<R extends ReportPageRow> implements Table {
     private MutableTableRow<R> getMutableTableRow(TableCellAddress address) {
         if (tableRange.contains(address)) {
             MutableTableRow<R> tableRow = new MutableTableRow<>(this, getCellDataAccessObject());
-            tableRow.setRow(getRow(address.getRow()));
+            R row = requireNonNull(getRow(address.getRow()), "Row is empty");
+            tableRow.setRow(row);
             return tableRow;
         }
         return null;
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/CellDataAccessObject.java b/src/main/java/org/spacious_team/table_wrapper/api/CellDataAccessObject.java
index c55fefc..354bccb 100644
--- a/src/main/java/org/spacious_team/table_wrapper/api/CellDataAccessObject.java
+++ b/src/main/java/org/spacious_team/table_wrapper/api/CellDataAccessObject.java
@@ -45,7 +45,8 @@ public interface CellDataAccessObject<C, R extends ReportPageRow> {
                 BigDecimal.ZERO : new BigDecimal(number);
     }
     default String getStringValue(C cell) {
-        return getValue(cell).toString();
+        Object value = requireNonNull(getValue(cell), "Not a string");
+        return value.toString();
     }
     Instant getInstantValue(C cell);
     default LocalDateTime getLocalDateTimeValue(C cell) {
@@ -55,34 +56,34 @@ public interface CellDataAccessObject<C, R extends ReportPageRow> {
     }
     default Object getValue(R row, Integer cellIndex) {
          C cell = getCell(row, cellIndex);
-        return getValue(cell);
+        return (cell == null) ? null : getValue(cell);
     }
     default int getIntValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getIntValue(cell);
     }
     default long getLongValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getLongValue(cell);
     }
     default double getDoubleValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getDoubleValue(cell);
     }
     default BigDecimal getBigDecimalValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getBigDecimalValue(cell);
     }
     default String getStringValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getStringValue(cell);
     }
     default Instant getInstantValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getInstantValue(cell);
     }
     default LocalDateTime getLocalDateTimeValue(R row, Integer cellIndex) {
-        C cell = getCell(row, cellIndex);
+        C cell = requireNonNull(getCell(row, cellIndex), "Cell not found");
         return getLocalDateTimeValue(cell);
     }
 }
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/EmptyTableRow.java b/src/main/java/org/spacious_team/table_wrapper/api/EmptyTableRow.java
new file mode 100644
index 0000000..2435afe
--- /dev/null
+++ b/src/main/java/org/spacious_team/table_wrapper/api/EmptyTableRow.java
@@ -0,0 +1,70 @@
+package org.spacious_team.table_wrapper.api;
+@Data
+class EmptyTableRow implements TableRow {
+    private final Table table;
+    private final int rowNum;
+    @Override
+    public TableCell getCell(TableColumnDescription column) {
+        return null;
+    }
+    @Override
+    public TableCell getCell(int i) {
+        return null;
+    }
+    @Override
+    public int getFirstCellNum() {
+        return -1;
+    }
+    @Override
+    public int getLastCellNum() {
+        return -1;
+    }
+    @Override
+    public boolean rowContains(Object expected) {
+        return false;
+    }
+    @Override
+    public Iterator<TableCell> iterator() {
+        return emptyIterator();
+    }
+    @Override
+    public Object getCellValue(TableColumnDescription column) {
+        return null;
+    }
+    @Override
+    public int getIntCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public long getLongCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public double getDoubleCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public BigDecimal getBigDecimalCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public String getStringCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public Instant getInstantCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public LocalDateTime getLocalDateTimeCellValue(TableColumnDescription column) {
+        throw new NullPointerException("Cell not found");
+    }
+    @Override
+    public TableRow clone() {
+        try {
+            return (TableRow) super.clone();
+        } catch (CloneNotSupportedException e) {
+            throw new RuntimeException("Can't clone " + this.getClass().getName());
+        }
+    }
+}
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/MutableTableRow.java b/src/main/java/org/spacious_team/table_wrapper/api/MutableTableRow.java
index 19300aa..8648914 100644
--- a/src/main/java/org/spacious_team/table_wrapper/api/MutableTableRow.java
+++ b/src/main/java/org/spacious_team/table_wrapper/api/MutableTableRow.java
@@ -57,8 +57,9 @@ class MutableTableRow<T extends ReportPageRow> implements TableRow {
         return dao.getLocalDateTimeValue(row, getCellIndex(column));
     }
     private Integer getCellIndex(TableColumnDescription column) {
-        return table.getHeaderDescription()
+         Integer cellIndex = table.getHeaderDescription()
                 .get(column.getColumn());
+        return requireNonNull(cellIndex, "Cell not found");
     }
     public MutableTableRow<T> clone() {
         try {
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/ReportPage.java b/src/main/java/org/spacious_team/table_wrapper/api/ReportPage.java
index 69aa8c7..f5e8c14 100644
--- a/src/main/java/org/spacious_team/table_wrapper/api/ReportPage.java
+++ b/src/main/java/org/spacious_team/table_wrapper/api/ReportPage.java
@@ -38,7 +38,9 @@ public interface ReportPage {
     }
     default Object getNextColumnValue(String firstColumnValuePrefix) {
         TableCellAddress address = findByPrefix(firstColumnValuePrefix);
-        for (TableCell cell : getRow(address.getRow())) {
+         ReportPageRow row = getRow(address.getRow());
+        if (row != null) {
+            for (  TableCell cell : row) {
                 if (cell != null && cell.getColumnIndex() > address.getColumn()) {
                      Object value = cell.getValue();
                     if (value != null && (!(value instanceof String) || !((String) value).isBlank())) {
@@ -46,14 +48,18 @@ public interface ReportPage {
                     }
                 }
             }
+        }
         return null;
     }
     ReportPageRow getRow(int i);
     int getLastRowNum();
     default TableCell getCell(TableCellAddress address) {
-        return getRow(address.getRow()).getCell(address.getColumn());
+         ReportPageRow row = getRow(address.getRow());
+        return (row == null) ? null : row.getCell(address.getColumn());
     }
-    default TableCellRange getTableCellRange(String firstRowPrefix, int headersRowCount, String lastRowPrefix) {
+    default TableCellRange getTableCellRange( String firstRowPrefix,
+                                             int headersRowCount,
+                                              String lastRowPrefix) {
         if (firstRowPrefix == null || lastRowPrefix == null) {
             return TableCellRange.EMPTY_RANGE;
         }
@@ -72,15 +78,17 @@ public interface ReportPage {
         if (startAddress.equals(TableCellAddress.NOT_FOUND)) {
             return TableCellRange.EMPTY_RANGE;
         }
+        ReportPageRow firstRow = requireNonNull(getRow(startAddress.getRow()), "Row not found");
         TableCellAddress endAddress = find(startAddress.getRow() + headersRowCount + 1, lastRowFinder);
         if (endAddress.equals(TableCellAddress.NOT_FOUND)) {
             return TableCellRange.EMPTY_RANGE;
         }
+        ReportPageRow lastRow = requireNonNull(getRow(endAddress.getRow()), "Row not found");
         return new TableCellRange(
                 startAddress.getRow(),
                 endAddress.getRow(),
-                getRow(startAddress.getRow()).getFirstCellNum(),
-                getRow(endAddress.getRow()).getLastCellNum());
+                firstRow.getFirstCellNum(),
+                lastRow.getLastCellNum());
     }
     default TableCellRange getTableCellRange( String firstRowPrefix, int headersRowCount) {
         if (firstRowPrefix == null) {
@@ -98,6 +106,7 @@ public interface ReportPage {
         if (startAddress.equals(TableCellAddress.NOT_FOUND)) {
             return TableCellRange.EMPTY_RANGE;
         }
+        ReportPageRow firstRow = requireNonNull(getRow(startAddress.getRow()), "Row not found");
         int lastRowNum = findEmptyRow(startAddress.getRow() + headersRowCount + 1);
         if (lastRowNum == -1) {
             lastRowNum = getLastRowNum(); 
@@ -107,11 +116,12 @@ public interface ReportPage {
         if (lastRowNum < startAddress.getRow()) {
             lastRowNum = startAddress.getRow();
         }
+        ReportPageRow lastRow = requireNonNull(getRow(lastRowNum), "Row not found");
         return new TableCellRange(
                 startAddress.getRow(),
                 lastRowNum,
-                getRow(startAddress.getRow()).getFirstCellNum(),
-                getRow(lastRowNum).getLastCellNum());
+                firstRow.getFirstCellNum(),
+                lastRow.getLastCellNum());
     }
     default int findEmptyRow(int startRow) {
         int lastRowNum = startRow;
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/TableColumnImpl.java b/src/main/java/org/spacious_team/table_wrapper/api/TableColumnImpl.java
index f0205f5..cb60b00 100644
--- a/src/main/java/org/spacious_team/table_wrapper/api/TableColumnImpl.java
+++ b/src/main/java/org/spacious_team/table_wrapper/api/TableColumnImpl.java
@@ -19,7 +19,8 @@ public class TableColumnImpl implements TableColumn {
             next_cell:
             for (  TableCell cell : header) {
                  Object value;
-                if (cell != null && cell.getColumnIndex() >= firstColumnForSearch && ((value = cell.getValue()) instanceof String)) {
+                if ((cell != null) && (cell.getColumnIndex() >= firstColumnForSearch) &&
+                        (((value = cell.getValue()) != null) && (value instanceof String))) {
                     String colName = value.toString().toLowerCase();
                     for (String word : words) {
                         if (!containsWord(colName, word)) {
@@ -33,6 +34,6 @@ public class TableColumnImpl implements TableColumn {
         throw new RuntimeException("Не обнаружен заголовок таблицы, включающий слова: " + String.join(", ", words));
     }
     private boolean containsWord(String text,  String word) {
-        return text.matches("(^|(.|\\n)*\\b|(.|\\n)*\\s)" + word + "(\\b(.|\\n)*|\\s(.|\\n)*|$)");
+        return word != null && text.matches("(^|(.|\\n)*\\b|(.|\\n)*\\s)" + word + "(\\b(.|\\n)*|\\s(.|\\n)*|$)");
     }
 }
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/TableFactory.java b/src/main/java/org/spacious_team/table_wrapper/api/TableFactory.java
index b55db28..8e9c6cd 100644
--- a/src/main/java/org/spacious_team/table_wrapper/api/TableFactory.java
+++ b/src/main/java/org/spacious_team/table_wrapper/api/TableFactory.java
@@ -54,8 +54,13 @@ public interface TableFactory {
         if (!range.equals(TableCellRange.EMPTY_RANGE)) {
             TableCellAddress tableNameCell =
                     reportPage.find(range.getFirstRow(), range.getFirstRow() + 1, tableNameFinder);
-            tableName = tableNameCell.equals(TableCellAddress.NOT_FOUND) ? "<not found>" :
-                    reportPage.getCell(tableNameCell).getStringValue();
+            if (!tableNameCell.equals(TableCellAddress.NOT_FOUND)) {
+                try {
+                    TableCell cell = requireNonNull(reportPage.getCell(tableNameCell));
+                    tableName = cell.getStringValue();
+                } catch (Exception ignore) {
+                }
+            }
         }
         return create(reportPage, tableName, range, headerDescription, headersRowCount);
     }
@@ -68,8 +73,13 @@ public interface TableFactory {
         if (!range.equals(TableCellRange.EMPTY_RANGE)) {
             TableCellAddress tableNameCell =
                     reportPage.find(range.getFirstRow(), range.getFirstRow() + 1, tableNameFinder);
-            tableName = tableNameCell.equals(TableCellAddress.NOT_FOUND) ? "<not found>" :
-                    reportPage.getCell(tableNameCell).getStringValue();
+            if (!tableNameCell.equals(TableCellAddress.NOT_FOUND)) {
+                try {
+                    TableCell cell = requireNonNull(reportPage.getCell(tableNameCell));
+                    tableName = cell.getStringValue();
+                } catch (Exception ignore) {
+                }
+            }
         }
         return create(reportPage, tableName, range, headerDescription, headersRowCount);
     }
diff --git a/src/main/java/org/spacious_team/table_wrapper/api/package-info.java b/src/main/java/org/spacious_team/table_wrapper/api/package-info.java
new file mode 100644
index 0000000..11c6e61
--- /dev/null
+++ b/src/main/java/org/spacious_team/table_wrapper/api/package-info.java
@@ -0,0 +1,2 @@
+@DefaultQualifier(NonNull.class)
+package org.spacious_team.table_wrapper.api;
